diff --git a/Users/michael/Projects/oss/claude-transcript/convert-claude-history.ts b/Users/michael/Projects/oss/claude-transcript/convert-claude-history.ts
index 1234567..abcdefg 100644
--- a/Users/michael/Projects/oss/claude-transcript/convert-claude-history.ts
+++ b/Users/michael/Projects/oss/claude-transcript/convert-claude-history.ts
@@ -80,7 +80,7 @@
   return output.join('\n');
 }
 
-function parseCommandContent(text: string): string[] {
+function parseCommandContent(text: string): string[] | null {
   const output: string[] = [];
   
   // Extract command name
@@ -91,33 +91,27 @@
   const commandArgsMatch = text.match(/<command-args>([^<]*)<\/command-args>/);
   const commandArgs = commandArgsMatch ? commandArgsMatch[1].trim() : '';
   
-  // Extract command message
-  const commandMessageMatch = text.match(/<command-message>([^<]*)<\/command-message>/);
-  const commandMessage = commandMessageMatch ? commandMessageMatch[1].trim() : '';
-  
   // Extract stdout
   const stdoutMatch = text.match(/<local-command-stdout>([\s\S]*?)<\/local-command-stdout>/);
   const stdout = stdoutMatch ? stdoutMatch[1].trim() : '';
   
+  // If this is just an empty stdout entry, skip it entirely
+  if (!commandName && stdoutMatch && !stdout) {
+    return null;
+  }
+  
   // Format command if we have it
   if (commandName) {
     const fullCommand = commandArgs ? `${commandName} ${commandArgs}` : commandName;
-    output.push(`\`${fullCommand}\``);
-    
-    // Add message after command if present
-    if (commandMessage && commandMessage !== commandName) {
-      output.push(commandMessage);
-    }
-  } else if (commandMessage) {
-    // Just output the message if no command name
-    output.push(commandMessage);
+    output.push(`> \`${fullCommand}\`\\`);
   }
   
   // Add stdout in bash code fence if present and not empty
   if (stdout && stdout.length > 0) {
-    output.push('```bash');
-    output.push(stdout);
-    output.push('```');
+    output.push('> ```bash');
+    const stdoutLines = stdout.split('\n');
+    output.push(...stdoutLines.map(line => `> ${line}`));
+    output.push('> ```');
   }
   
   // If we didn't find any command elements, output as blockquote